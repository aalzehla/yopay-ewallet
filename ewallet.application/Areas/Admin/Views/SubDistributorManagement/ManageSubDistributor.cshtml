
@model ewallet.application.Models.SubDistributorManagementModel
@{
    ViewBag.Title = "Manage Sub-Agent";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
    //var BreadCum = ewallet.application.Library.ApplicationUtilities.GenerateBreadcum("Sub-Distributor", "Manage");
    var BreadCum = ewallet.application.Library.ApplicationUtilities.GenerateBreadcum("Admin/subdistributormanagement/index?ParentId="+ Model.ParentID, "Manage",ControllerDisplayName:"Sub-Distributor List");

}
@section BreadCum{
    @Html.Raw(BreadCum)}

<div class="card" style="zoom: 1;">
    <div class="card-header header-elements-inline">
        <h6 class="card-title">
            <b style="color:red">*</b><b> Note: Please fill out all the field stating *(Mandatory) </b>
        </h6>
    </div>
    <div class="card-body" style="">
        @using (Html.BeginForm("ManageSubDistributor", "SubDistributorManagement", new { ReturnUrl = "Index" }, FormMethod.Post, new { @id = "Index", enctype = "multipart/form-data" }))
        {

            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true)
            @Html.HiddenFor(model => model.AgentID)
            @Html.HiddenFor(model => model.ParentID)
            @Html.HiddenFor(model => model.UserID)
            @Html.HiddenFor(Model => Model.AgentRegistrationCertificate)
            @Html.HiddenFor(Model => Model.AgentLogo)
            @Html.HiddenFor(Model => Model.AgentPanCertificate)
            @Html.HiddenFor(Model => Model.AgentOperationType)
            <ul class="nav nav-tabs nav-tabs-highlight">
                <li class="nav-item"><a href="#agentinformation" class="nav-link active " data-toggle="tab">Agent Information</a></li>
                @if (string.IsNullOrEmpty(Model.AgentID))
                {
                    <li class="nav-item"><a href="#userinformation" class="nav-link " data-toggle="tab">User Information</a></li>
                }
                @if (String.IsNullOrEmpty(Model.AgentID) || Model.AgentOperationType.ToUpper() == "BUSINESS")
                {
                    <li class="nav-item" id="contactpersondtl"><a href="#contactpersondetail" class="nav-link " data-toggle="tab">Contact Details</a></li>
                }
            </ul>
            <div class="tab-content">
                <div id="agentinformation" class="tab-pane fade active show">
                    @if (string.IsNullOrEmpty(Model.AgentID))
                    {
                        <div class="form-group mb-3 mb-md-2">
                            @Html.Label("Agent Type :", new { @class = "d-block font-weight-semibold" })
                            <div class="form-check form-check-inline form-check-right">
                                <label class="form-check-label">
                                    Individual
                                    @Html.RadioButtonFor(model => model.AgentOperationType, "Individual", new { @name = "AgentOperationType", @id = "utype_ind", @checked = "checked", @class = "form-check-input-styled" })
                                </label>
                            </div>
                            <div class="form-check form-check-inline form-check-right">
                                <label class="form-check-label">
                                    Business
                                    @Html.RadioButtonFor(model => model.AgentOperationType, "Business", new { @name = "AgentOperationType", @id = "utype_bus", @class = "form-check-input-styled" })
                                </label>
                            </div>
                        </div>
                    }

                    <div class="form-group mb-3 mb-md-2 ">
                        @Html.Label("Is auto commission :", new { @class = "d-block font-weight-semibold" }) &nbsp;&nbsp;
                        <label class="form-check-label">
                            @Html.CheckBoxFor(model => model.AgentCommissionType, new { @name = "is_auto_commission", @class = "form-check-input-styled" })
                        </label>
                    </div>
                    <div class="row">
                        @Html.NTextBoxFor(model => model.AgentName, new { @class = "form-control", autocomplete = "off" }, 3)
                    </div>
                    <div class="row">
                        @Html.NTextBoxFor(model => model.AgentRegistrationNumber, new { @class = "form-control", autocomplete = "off" }, 3)
                        @Html.NTextBoxFor(model => model.AgentPanNumber, new { @class = "form-control", autocomplete = "off" }, 3)
                        @Html.NTextBoxFor(model => model.AgentContractDate, new { @class = "form-control", autocomplete = "off", @readonly = "readonly" }, 3)

                    </div>
                    <div class="row">
                        @Html.NTextBoxFor(model => model.AgentMobileNumber, new { @class = "form-control", autocomplete = "off",maxlength = "10", @onkeypress = "return isNumber(event)" }, 3)

                        @Html.NTextBoxFor(model => model.AgentEmail, new { @class = "form-control", autocomplete = "off", @type = "email" }, 3)
                        @Html.NTextBoxFor(model => model.AgentWebUrl, new { @class = "form-control", autocomplete = "off" }, 3)

                    </div>
                    <div class="row">
                        @Html.NDropDownListFor(model => model.AgentCountry, new SelectList(ViewBag.AgentCountryList, "Value", "Text"), new { @class = "form-control", autocomplete = "off" }, 3)
                        @Html.NDropDownListFor(model => model.AgentProvince, new SelectList(ViewBag.AgentProvinceList, "Value", "Text"), new { @class = "form-control", autocomplete = "off" }, 3)
                        @Html.NDropDownListFor(model => model.AgentDistrict, new SelectList(ViewBag.AgentDistrictList, "Value", "Text"), new { @class = "form-control", autocomplete = "off" }, 3)
                        @*@Html.NTextBoxFor(model => model.AgentCountry, new { @class = "form-control", autocomplete = "off" }, 3)
                        @Html.NTextBoxFor(model => model.AgentProvince, new { @class = "form-control", autocomplete = "off" }, 3)

                        @Html.NTextBoxFor(model => model.AgentDistrict, new { @class = "form-control", autocomplete = "off" }, 3)*@
                    </div>
                    <div class="row">
                        @Html.NDropDownListFor(model => model.AgentVDC_Muncipality, new SelectList(ViewBag.AgentVDC_MuncipilityList, "Value", "Text"), new { @class = "form-control", autocomplete = "off" }, 3)

                        @*@Html.NTextBoxFor(model => model.AgentVDC_Muncipality, new { @class = "form-control", autocomplete = "off" }, 3)*@
                        @Html.NTextBoxFor(model => model.AgentWardNo, new { @class = "form-control", autocomplete = "off", @onkeypress = "return isNumber(event)" }, 3)
                        @Html.NTextBoxFor(model => model.AgentStreet, new { @class = "form-control", autocomplete = "off" }, 3)

                    </div>
                    <div class="row">
                        @Html.NTextBoxFor(model => model.AgentBalance, new { @class = "form-control", autocomplete = "off", @onkeypress = "return isNumber(event)" }, 3)
                        @Html.NTextBoxFor(model => model.AgentCreditLimit, new { @class = "form-control", autocomplete = "off", @onkeypress = "return isNumber(event)" }, 3)

                    </div>
                    <div class="row">
                        <div class="form-group row">
                            <div class="col-md-4 Individual_hide">
                                @Html.LabelFor(model => model.AgentLogo, "Agent Logo", new { @class = "label", autocomplete = "off" })
                                <div><img id="logo_view" height="150" width="150" style="border: none" /></div>
                                <div> <input type="file" title="Agent Logo" id="Agent_Logo" name="Agent_Logo" accept="image/x-png,image/jpeg,image/jpg" onchange="showLogo(this)" /> </div>
                            </div>
                            <div class="col-md-4 Business_hide">
                                @Html.LabelFor(model => model.AgentPanCertificate, "Pan Certificate", new { @class = "label", autocomplete = "off" })
                                <div><img id="pan_view" height="150" width="150" style="border: none" /></div>
                                <div> <input type="file" title="Pan Certiticate" id="Pan_Certiticate" name="Pan_Certiticate" accept="image/x-png,image/jpeg,image/jpg" onchange="showpan(this)" /> </div>
                            </div>

                            <div class="col-md-4 Individual_hide">
                                @Html.LabelFor(model => model.AgentRegistrationNumber, "Registration Certificate", new { @class = "label", autocomplete = "off" })
                                <div><img id="reg_view" height="150" width="150" style="border: none" /></div>
                                <div><input type="file" title="Registration Certificate" id="Registration_Certificate" name="Registration_Certificate" accept="image/x-png,image/jpeg,image/jpg" onchange="showReg(this)" /> </div>
                            </div>
                        </div>



                    </div>

                </div>
                @if (string.IsNullOrEmpty(Model.AgentID))
                {
                    <div id="userinformation" class="tab-pane fade">
                        <h8 class="card-title">
                            <b>[Note: Please Note this user will be your primary user for login] </b>
                        </h8>

                        <div class="card-header">
                            <h6>
                                <b>Basic Information</b>
                            </h6>

                            <div class="row">
                                @if (string.IsNullOrEmpty(Model.AgentID))

                                {
                                    @Html.NTextBoxFor(model => model.UserName, new { @class = "form-control", autocomplete = "off" }, 3)
                                }
                                else
                                {
                                    <div class="col-lg-4">
                                        <label>ChangePassword</label><input type="checkbox" name="changepassword" class="form-check-input-styled" />
                                    </div>
                                }
                                @Html.NTextBoxFor(model => model.Password, new { @class = "form-control", autocomplete = "off", @type = "password" }, 3)
                                @Html.NTextBoxFor(model => model.ConfirmPassword, new { @class = "form-control", autocomplete = "off", @type = "password" }, 3)
                            </div>

                            <div class="row">
                                @Html.NTextBoxFor(model => model.FirstName, new { @class = "form-control", autocomplete = "off", @onkeypress = "return isAlphabateOnly(event)" }, 3)
                                @Html.NTextBoxFor(model => model.MiddleName, new { @class = "form-control", autocomplete = "off", @onkeypress = "return isAlphabateOnly(event)" }, 3)
                                @Html.NTextBoxFor(model => model.LastName, new { @class = "form-control", autocomplete = "off", @onkeypress = "return isAlphabateOnly(event)" }, 3)
                            </div>
                            <div class="row">
                                @Html.NTextBoxFor(model => model.UserMobileNumber, new { @class = "form-control", autocomplete = "off",maxlength = "10", @onkeypress = "return isNumber(event)" }, 3)
                                @Html.NTextBoxFor(model => model.UserEmail, new { @class = "form-control", autocomplete = "off", @type = "email" }, 3)

                            </div>
                        </div>
                    </div>
                }
                @if (String.IsNullOrEmpty(Model.AgentOperationType) || Model.AgentOperationType.ToUpper() == "BUSINESS")
                {
                    <div id="contactpersondetail" class="tab-pane fade">
                        <div class="card-body">
                            <h6>
                                <b>Contact Person Info</b>
                            </h6>
                            <div class="row">
                                @Html.NTextBoxFor(model => model.ContactPersonName, new { @class = "form-control", autocomplete = "off" }, 3)
                                @Html.NTextBoxFor(model => model.ContactPersonMobileNumber, new { @class = "form-control", autocomplete = "off",maxlength = "10", @onkeypress = "return isNumber(event)" }, 3)
                                @Html.NDropDownListFor(model => model.ContactPersonIdType, new SelectList(ViewBag.DoctypeList, "Value", "Text"), new { @class = "form-control", autocomplete = "off" }, 3)
                                @*@Html.NTextBoxFor(model => model.ContactPersonNumber, new { @class = "form-control", autocomplete = "off", @onkeypress = "return isNumber(event)" }, 3)*@
                            </div>
                            <div class="row">
                                @*@Html.NDropDownListFor(model => model.ContactPersonIdIssueCountry, new SelectList(ViewBag.IssueDistrictList, "Value", "Text"), new { @class = "form-control", autocomplete = "off" }, 3)*@
                                @Html.NTextBoxFor(model => model.ContactPersonIdNumber, new { @class = "form-control", autocomplete = "off" }, 3)
                                @Html.NDropDownListFor(model => model.ContactPersonIdIssueDistrict, new SelectList(ViewBag.IssueDistrictList, "Value", "Text"), new { @class = "form-control", autocomplete = "off" }, 3)
                            </div>
                            <div class="row">
                                @Html.NTextBoxFor(model => model.ContactPersonIdIssueDate, new { @class = "form-control", autocomplete = "off", @readonly = "readonly" }, 3)
                                @Html.NTextBoxFor(model => model.ContactPersonIdIssueDate_BS, new { @class = "form-control", autocomplete = "off", @readonly = "readonly" }, 3)
                                @*@Html.NTextBoxFor(model => model.ContactPersonIdExpiryDate, new { @class = "form-control", autocomplete = "off", @readonly = "readonly" }, 4)
                                @Html.NTextBoxFor(model => model.ContactPersonIdExpiryDate_BS, new { @class = "form-control", autocomplete = "off", @readonly = "readonly" }, 4)*@
                            </div>
                        </div>
                    </div>
                }
                <div class="row">
                    <div class="col-lg-12">
                        <button type="submit" class="btn btn-success btn-sm">Save<i class="icon-floppy-disk ml-2"></i></button>
                    </div>
                </div>
            </div>
        }

    </div>
</div>
<script type="text/javascript">

        var yearRangeDOB = "1944:-10"; //"1944:+0";
        var yearRangeExpire = "1944:+10"; //"1944:+20";
        var minimum = "[1943, 04, 14]";
        var dateFormat = "yy-mm-dd";
        var NepalDateToday = NepaliFunctions.ConvertDateFormat(NepaliFunctions.GetCurrentBsDate());
       function AddressInital() {

        if ($("#AgentProvince").val() === "") {
            $("#AgentDistrict").empty().prepend("<option value='' selected>--Select District--</option>");//.prop("disabled", true);
            $("#AgentVDC_Muncipality").empty().prepend("<option value=''  selected>--Select Municipality--</option>");//.prop("disabled", true);
        }
    }
    $(document).ready(function () {
        AddressInital();

         $("#AgentContractDate").datepicker({
                dateFormat: dateFormat,
                maxDate: new Date,
                changeMonth: true,
                changeYear: true,
                min: [1943, 04, 14],
              //  yearRange: yearRangeDOB,
                showAnim: "slideDown",
                autoSize: true
         });
         //$("#AgentContractDate_BS").nepaliDatePicker({
         //       ndpYear: true,
         //       ndpMonth: true,
         //       readOnlyInput: true,
         //       ndpEnglishInput: 'DOB_AD',
         //       disableAfter: NepalDateToday
         //});


         //$("#ContactPersonIdExpiryDate").datepicker({
         //       dateFormat: dateFormat,
         //       minDate: new Date,
         //       changeMonth: true,
         //       changeYear: true,
         //       yearRange: yearRangeExpire,
         //       showAnim: "slideDown",
         //       autoSize: true
         //   }).attr('readonly', 'readonly');
         //   $('#ContactPersonIdExpiryDate_BS').nepaliDatePicker({
         //       ndpYear: true,
         //       ndpMonth: true,
         //       readOnlyInput: true,
         //       ndpEnglishInput: 'ContactPersonIdExpiryDate',
         //       disableBefore: NepalDateToday

         //   });





        if ($("#AgentID").val() != "") {

            document.getElementById("reg_view").src = $("#AgentRegistrationCertificate").val();
            document.getElementById("logo_view").src =$("#AgentLogo").val();
            document.getElementById("pan_view").src = $("#AgentPanCertificate").val();
            // $("#AgentOperationType").prop("disabled", true);
            $('#UserEmail').addClass("disabled"); //prop("disabled", true);
            $('#UserMobileNumber').addClass("disabled");
           // $('#UserMobileNumber').prop("readonly", "readonly");
        }
        else {

            $("#contactpersondetail").prop("hidden",true);
        $("#contactpersondtl").hide();
            $("#AgentOperationType").val("INDIVIDUAL");
          //  $('#utype_ind').prop("selected", "selected");

        }
        /*debugger*/;
          if ($("#AgentOperationType").val().toUpperCase()=="INDIVIDUAL") {
             $('#AgentRegistrationNumber').prop("disabled", true);
             $('#AgentPanNumber').prop("disabled", true);
             $('#AgentContractDate').prop("disabled", true);
             $('#AgentMobileNumber').prop("disabled", true);
             $('#AgentEmail').prop("disabled", true);
             $('#AgentWebUrl').prop("disabled", true);
             $('#AgentWebUrl').prop("disabled", true);
            $('#AgentWebUrl').prop("disabled", true);
            $('#Pan_Certiticate').prop("disabled", true);
            $('#Registration_Certificate').prop("disabled", true);

        }
        else
          {
              $("#ContactPersonIdIssueDate").datepicker({
                dateFormat: dateFormat,
                maxDate: new Date,
                changeMonth: true,
                changeYear: true,
                showAnim: "slideDown",
                min: [1943, 04, 14],
                yearRange: yearRangeDOB,
                autoSize: true
            });
        $('#ContactPersonIdIssueDate_BS').nepaliDatePicker({
                ndpYear: true,
                ndpMonth: true,
                readOnlyInput: true,
                ndpEnglishInput: 'ContactPersonIdIssueDate',
                disableAfter: NepalDateToday

        });
            $('#AgentRegistrationNumber').prop("disabled", false);
             $('#AgentPanNumber').prop("disabled", false);
             $('#AgentContractDate').prop("disabled", false);
             $('#AgentMobileNumber').prop("disabled", false);
             $('#AgentEmail').prop("disabled", false);
             $('#AgentWebUrl').prop("disabled", false);
             $('#AgentWebUrl').prop("disabled", false);
             $('#AgentWebUrl').prop("disabled", false);
             $('#Pan_Certiticate').prop("disabled", false);
             $('#Registration_Certificate').prop("disabled", false);
        }


    });



    $('#utype_ind').change(function () {
        $("#contactpersondetail").prop("hidden",true);
        $("#contactpersondtl").hide();
        $("#AgentOperationType").val("INDIVIDUAL");

         $('#AgentRegistrationNumber').prop("disabled", true);
             $('#AgentPanNumber').prop("disabled", true);
             $('#AgentContractDate').prop("disabled", true);
             $('#AgentMobileNumber').prop("disabled", true);
             $('#AgentEmail').prop("disabled", true);
             $('#AgentWebUrl').prop("disabled", true);
             $('#AgentWebUrl').prop("disabled", true);
            $('#AgentWebUrl').prop("disabled", true);
            $('#Pan_Certiticate').prop("disabled", true);
            $('#Registration_Certificate').prop("disabled", true);
    });
    $('#utype_bus').change(function () {
        $("#contactpersondetail").prop("hidden",false);
        $("#contactpersondtl").show();
        $("#AgentOperationType").val("BUSINESS");

          $('#AgentRegistrationNumber').prop("disabled", false);
             $('#AgentPanNumber').prop("disabled", false);
             $('#AgentContractDate').prop("disabled", false);
             $('#AgentMobileNumber').prop("disabled", false);
             $('#AgentEmail').prop("disabled", false);
             $('#AgentWebUrl').prop("disabled", false);
             $('#AgentWebUrl').prop("disabled", false);
             $('#AgentWebUrl').prop("disabled", false);
             $('#Pan_Certiticate').prop("disabled", false);
        $('#Registration_Certificate').prop("disabled", false);
        $("#ContactPersonIdIssueDate").datepicker({
                dateFormat: dateFormat,
                maxDate: new Date,
                changeMonth: true,
                changeYear: true,
                showAnim: "slideDown",
                min: [1943, 04, 14],
                yearRange: yearRangeDOB,
                autoSize: true
            });
        $('#ContactPersonIdIssueDate_BS').nepaliDatePicker({
                ndpYear: true,
                ndpMonth: true,
                readOnlyInput: true,
                ndpEnglishInput: 'ContactPersonIdIssueDate',
                disableAfter: NepalDateToday

        });
    });

    $('#AgentContractDate').change(function () {
            var dateObj = NepaliFunctions.ConvertToDateObject($('#AgentContractDate').val(), "YYYY-MM-DD");
            $('#AgentContractDate').removeClass("input-validation-error");
            if ($('#AgentContractDate-error').length > 0) {
                $('#AgentContractDate-error').html("");
            }
        });


    $('#ContactPersonIdIssueDate').change(function () {
            var dateObj = NepaliFunctions.ConvertToDateObject($('#ContactPersonIdIssueDate').val(), "YYYY-MM-DD");
        $('#ContactPersonIdIssueDate_BS').val(NepaliFunctions.ConvertDateFormat(NepaliFunctions.AD2BS(dateObj)));
        
            $('#ContactPersonIdIssueDate').removeClass("input-validation-error");
            if ($('#ContactPersonIdIssueDate-error').length > 0) {
                $('#ContactPersonIdIssueDate-error').html("");
            }
        });

        $('#ContactPersonIdExpiryDate').change(function () {
            var dateObj = NepaliFunctions.ConvertToDateObject($('#ContactPersonIdExpiryDate').val(), "YYYY-MM-DD");
            $('#ContactPersonIdExpiryDate_BS').val(NepaliFunctions.ConvertDateFormat(NepaliFunctions.AD2BS(dateObj)));
             
        });


    //Agent Address
    $("#AgentProvince").change(function () {
        /*debugger*/;
            AddressInital();
            $("#AgentDistrict").empty().prepend("<option value=''  selected>--Select District--</option>");
            $("#AgentVDC_Muncipality").empty().prepend("<option value=''  selected>--Select Municipality--</option>");
            var provinceid = $("#AgentProvince").val();
            $.ajax({
                type: 'POST',
                async: true,
                url: '@Url.Action("GetDistrictsByProvince")',
                dataType: 'json',
                data: { provinceId: provinceid },
                success: function (districts) {
                    $.each(districts, function (i, district) {
                        $("#AgentDistrict").append('<option value="' + district.Value + '">' + district.Text + '</option>');
                    });
                },
                error: function (ex) {
                    alert('Failed to retrieve Province Districts.' + ex);
                }
            });
            return false;
    });
     $("#AgentDistrict").change(function () {

           // $("#PermanentDistrict").empty().prepend("<option value=''  selected>--Permanent District--</option>");
            $("#AgentVDC_Muncipality").empty().prepend("<option value=''  selected>--Select Municipality--</option>");
            var district = $("#AgentDistrict").val();
            $.ajax({
                type: 'POST',
                async: true,
                url: '@Url.Action("GetMuncipalityByDistrict")',
                dataType: 'json',
                data: { district: district },
                success: function (vdc_muncipality) {
                    $.each(vdc_muncipality, function (i, vdc_munciple) {
                        $("#AgentVDC_Muncipality").append('<option value="' + vdc_munciple.Value + '">' + vdc_munciple.Text + '</option>');
                    });
                },
                error: function (ex) {
                    alert('Failed to retrieve District VDC/Muncipality.' + ex);
                }
            });
            return false;
     });


      //alphabet and whitespace
        function isAlphabateOnly(evt) {
            evt = (evt) ? evt : window.event;
            var charCode = (evt.which) ? evt.which : evt.keyCode;
            if ((charCode > 64 && charCode < 91) || (charCode > 96 && charCode < 123) || (charCode==32)) {
                return true;
            }
            return false;
        }
        //Text and dot
        function isAlphabaticChar(evt) {
            evt = (evt) ? evt : window.event;
            var charCode = (evt.which) ? evt.which : evt.keyCode;
            if ((charCode > 32 && charCode < 46) || (charCode > 46 && charCode < 48) || (charCode > 57 && charCode < 65) || (charCode > 90 && charCode < 97) || (charCode > 122 && charCode < 127) || (charCode > 47 && charCode < 58)) {
                return false;
            }
            return true;
        }
        //Number Only
        function isNumber(evt) {
            evt = (evt) ? evt : window.event;
            var charCode = (evt.which) ? evt.which : evt.keyCode;
            if (charCode > 31 && (charCode < 48 || charCode > 57)) {
                return false;
            }
            return true;
    }
    function isNumberMinusDot(evt) {
        /*debugger*/;
        evt = (evt) ? evt : window.event;
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        if (charCode > 31 && (charCode < 48 || charCode > 57) && charCode != 45 && charCode != 46) {
            return false;
        }
        return true;
    }

    function showLogo(input) {
        /*debugger*/;
        if (input.files && input.files[0]) {
            var filerdr = new FileReader();
            filerdr.onload = function (e) {
                $('#logo_view').attr('src', e.target.result);
            }
            filerdr.readAsDataURL(input.files[0]);
        }
    }

    function showpan(input) {

        if (input.files && input.files[0]) {
            var filerdr = new FileReader();
            filerdr.onload = function (e) {
                $('#pan_view').attr('src', e.target.result);
            }
            filerdr.readAsDataURL(input.files[0]);
        }
    }
    function showReg(input) {

        if (input.files && input.files[0]) {
            var filerdr = new FileReader();
            filerdr.onload = function (e) {
                $('#reg_view').attr('src', e.target.result);
            }
            filerdr.readAsDataURL(input.files[0]);
        }
    }


 
    $('#DOB_Eng').change(function () {
            var dateObj = NepaliFunctions.ConvertToDateObject($('#DOB_Eng').val(), "YYYY-MM-DD");
            $('#DOB_Nep').val(NepaliFunctions.ConvertDateFormat(NepaliFunctions.AD2BS(dateObj)));
            $('#DOB_Eng').removeClass("input-validation-error");
            if ($('#DOB_Eng-error').length > 0) {
                $('#DOB_Eng-error').html("");
            }
            $('#DOB_Nep').removeClass("input-validation-error");
            if ($('#DOB_Nep-error').length > 0) {
                $('#DOB_Nep-error').html("");
            }

 

        });
</script>